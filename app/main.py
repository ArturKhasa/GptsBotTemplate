from openai import OpenAI
import openai
import time
import logging
import re
import asyncio
import subs
from invoice import generate_invoice, get_company_info
from datetime import datetime, timedelta
from promting import inicial_start_promt
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message, InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice, PreCheckoutQuery, FSInputFile
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ChatType, ChatAction
from config import (
    OPENAI_API_KEY,
    TELEGRAM_BOT_TOKEN,
    async_session,
    ADMIN_USER_ID,
    SUBSCRIPTION_PRICE,
    FREE_MESSAGES_LIMIT,
    PAYMENTS_TOKEN,
    SUBSCRIPTION_DURATION,
    SUPPORTED_EXTENSIONS
)
from database import init_db, ChatHistory, User
from sqlalchemy.future import select
# –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
button1 = KeyboardButton(text="üìå –û –Ω–∞—Å")
button2 = KeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏")
button3 = KeyboardButton(text="üìö –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
button4 = KeyboardButton(text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
button5 = KeyboardButton(text="‚≠ê –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
keyboard = ReplyKeyboardMarkup(
    keyboard=[[button5], [button1], [button2], [button3], [button4]],  # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Å–ø–∏—Å–∫–æ–º —Å–ø–∏—Å–∫–æ–≤
    resize_keyboard=True  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
)
client = OpenAI(api_key=OPENAI_API_KEY)
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ aiogram 3.7+
bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

async def send_long_message(message: Message, text: str, chunk_size: int = 4000):
    for i in range(0, len(text), chunk_size):
        chunk = text[i:i+chunk_size]
        await message.answer(chunk, parse_mode="HTML")

async def upload_and_analyze_file(file_paths: [], user_query):
    if not user_query:
        user_query = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–∞–π–ª –∏ –ø—Ä–∏—à–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"

    assistant = client.beta.assistants.create(
        name="–≠–∫—Å–ø–µ—Ä—Ç –≤ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏",
        instructions=inicial_start_promt(),
        model="gpt-5-mini",
        tools=[{"type": "file_search"}],
    )

    vector_store = client.beta.vector_stores.create()
    file_streams = [open(path, "rb") for path in file_paths]
    file_batch = client.beta.vector_stores.file_batches.upload_and_poll(
        vector_store_id=vector_store.id, files=file_streams
    )
    thread = client.beta.threads.create(
        messages=[
            {
                "role": "user",
                "content": user_query
            }
        ]
    )

    assistant = client.beta.assistants.update(
        assistant_id=assistant.id,
        tool_resources={"file_search": {"vector_store_ids": [vector_store.id]}},
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
    run = openai.beta.threads.runs.create(
        thread_id=thread.id,
        assistant_id=assistant.id
    )
    run_id = run.id

    # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    while True:
        run_status = openai.beta.threads.runs.retrieve(thread_id=thread.id, run_id=run_id)
        if run_status.status == "completed":
            break
        time.sleep(2)

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
    messages = openai.beta.threads.messages.list(thread_id=thread.id)
    for msg in messages.data:
        if msg.role == "assistant":
            client.beta.vector_stores.delete(vector_store_id=vector_store.id)
            return msg.content[0].text.value

    return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç OpenAI."

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ ChatGPT
async def chatgpt_response(prompt: str, from_user) -> str:
    try:
        sys_prompt = inicial_start_promt()
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await async_session().execute(
            select(ChatHistory)
            .where(ChatHistory.user_id == from_user.id)
            .order_by(ChatHistory.timestamp.asc(), ChatHistory.id.asc())
        )
        history_rows = result.scalars().all()

        # –§–æ—Ä–º–∏—Ä—É–µ–º messages –¥–ª—è ChatGPT
        messages = [{"role": "system", "content": sys_prompt}]
        for row in history_rows:
            messages.append({"role": "user", "content": row.user_message})
            messages.append({"role": "assistant", "content": row.bot_response})

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        messages.append({"role": "user", "content": prompt})
        user = await get_or_create_user(from_user)

        if user.subscription_type == 'lite':
            model = "gpt-5-mini"
        else:
            model = "gpt-5"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –º–æ–¥–µ–ª—å
        # response = client.chat.completions.create(
        #     model=model,
        #     messages=messages,
        # )

        response = client.responses.create(
            model=model,
            tools=[{"type": "web_search"}],
            input=messages
        )

        return response.output_text
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        await notify_admin(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ PostgreSQL
async def save_message(user_id: int, user_message: str, bot_response: str):
    try:
        async with async_session() as session:
            async with session.begin():
                new_entry = ChatHistory(
                    user_id=user_id,
                    user_message=user_message,
                    bot_response=bot_response
                )
                session.add(new_entry)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
        await notify_admin(f"–û—à–∏–±–∫–∞ –ë–î: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ Telegram
async def notify_admin(error_message: str):
    try:
        await bot.send_message(ADMIN_USER_ID, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:\n<pre>{error_message}</pre>")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_or_create_user(tg_user, utm = None) -> User:
    async with async_session() as session:
        async with session.begin():
            result = await session.execute(select(User).where(User.user_id == tg_user.id))
            user = result.scalars().first()

            if not user:
                user = User(user_id=tg_user.id,full_name=tg_user.first_name, username=tg_user.username, free_messages=FREE_MESSAGES_LIMIT, has_subscription=False, utm=utm)
                session.add(user)
                await session.commit()

            return user

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async def broadcast_message(text: str):
    async with async_session() as session:
        async with session.begin():
            result = await session.execute(select(User.user_id).where(User.has_subscription == False))
            users = result.scalars().all()

            for user_id in users:
                try:
                    await bot.send_message(user_id, text)
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
async def can_user_send_message(user_id: int) -> bool:
    async with async_session() as session:
        async with session.begin():
            result = await session.execute(select(User).where(User.user_id == user_id))
            user = result.scalars().first()

            if user and user.has_subscription:
                if user.subscription_expiry <= datetime.now():
                    user.has_subscription = False
                    await session.commit()
                    return False
                return True  # –£ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π

            if user and user.free_messages > 0:
                user.free_messages -= 1  # –£–º–µ–Ω—å—à–∞–µ–º –ª–∏–º–∏—Ç
                await session.commit()
                return True

            return False

# –ö–Ω–æ–ø–∫–∞ "–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
async def get_subscription_button():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"LITE ‚Äî 990 ‚ÇΩ/–º–µ—Å: –ª–∏–º–∏—Ç 20 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–µ—Å, –±–µ–∑ .docx, —É—Ä–µ–∑–∞–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏", callback_data="buy_subscription_lite")],
        [InlineKeyboardButton(text=f"PRO ‚Äî 1 990 ‚ÇΩ/–º–µ—Å: –±–µ–∑–ª–∏–º–∏—Ç, –ø–æ–ª–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, .docx-—à–∞–±–ª–æ–Ω—ã", callback_data="buy_subscription_pro")]
    ])
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async def buy_subscription(user_id: int, subscription_type: str) -> User:
    async with async_session() as session:
        async with session.begin():
            result = await session.execute(select(User).where(User.user_id == user_id))
            user = result.scalars().first()

            if user:
                user.has_subscription = True
                user.subscription_expiry = datetime.utcnow() + timedelta(days=SUBSCRIPTION_DURATION)
                user.subscription_type = subscription_type
                # user.free_messages = FREE_MESSAGES_LIMIT
                await session.commit()
    return user

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    args = message.text.split(" ", 1)  # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
    utm = args[1] if len(args) > 1 else None  # –ò–∑–≤–ª–µ–∫–∞–µ–º UTM-–º–µ—Ç–∫—É
    await get_or_create_user(message.from_user, utm)
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}! –Ø ‚Äî –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç.üëã\n\n"
                         f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –≤ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–∞–≤–∞, –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è –∏ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–æ–≥–æ —É—á–µ—Ç–∞. –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –º–Ω–µ {FREE_MESSAGES_LIMIT} –≤–æ–ø—Ä–æ—Å–∞, —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ ü§ü\n\n"
                         f"–ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", reply_markup=keyboard)

# üìå –û –Ω–∞—Å
@dp.message(lambda message: message.text == "üìå –û –Ω–∞—Å")
async def about_bot(message: types.Message):
    text = (
        "ü§ñ –í–æ—Ç –ø–µ—Ä–µ—á–µ–Ω—å —Ç–æ–≥–æ, —á—Ç–æ –º–æ–∂–µ—Ç –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç:\n\n"
        "‚úÖ –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –Ω–∞–ª–æ–≥–∞–º –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏\n"
        "‚úÖ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã\n"
        "‚úÖ –ü–æ–º–æ–≥–∞–µ—Ç —Å–¥–∞–≤–∞—Ç—å –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å –≤ —Å—Ä–æ–∫\n"
        "‚úÖ –£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –≤–∞–∂–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö\n\n"
        "üìÖ –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞\n"
        "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –¥–ª—è —é—Ä.–ª–∏—Ü\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /invoice"
    )
    await message.answer(text)

# üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏
@dp.message(lambda message: message.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏")
async def contact_support(message: types.Message):
    await message.answer("–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @MARINA_HMA")

# ‚≠ê –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
@dp.message(lambda message: message.text == "‚≠ê –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def contact_support(message: types.Message):
    keyboard = await get_subscription_button()
    await message.answer(
        "‚≠ê –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å. –õ–∏–±–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ —é—Ä.–ª–∏—Ü–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /invoice.\n\n–ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ –≤—Å–µ–º–∏ –≤–∏–¥–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —é—Ä.–ª–∏—Ü, –Ω–∞–ø–∏—à–∏—Ç–µ @MARINA_HMA",
        reply_markup=keyboard)


# üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–ø—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞)
@dp.message(lambda message: message.text == "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def send_instruction(message: types.Message):
    instruction_text = (
        "üìå *–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:*\n\n"
        "üí¨ _–ö–∞–∫ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–∞–ª–æ–≥ –Ω–∞ –ø—Ä–∏–±—ã–ª—å –¥–ª—è –ò–ü –≤ 2025 –≥–æ–¥—É?_\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–µ–π, –ø—Ä–∞–≤–æ–º –∏ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏–µ–º"
    )
    await message.answer(instruction_text, parse_mode="MarkdownV2")

# üìö –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (–æ—Ç–ø—Ä–∞–≤–∫–∞ PDF)
@dp.message(lambda message: message.text == "üìö –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
async def send_pdf(message: types.Message):
    await bot.send_document(message.chat.id, FSInputFile("promt.pdf"), caption="üìé –í–æ—Ç –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∑–≤–æ–ª—è—Ç –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –ò–ò")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
@dp.message(Command("broadcast"))
async def cmd_broadcast(message: Message):
    if message.from_user.id != ADMIN_USER_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    text = message.text.replace("/broadcast", "").strip()
    if not text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
    await broadcast_message(text)
    await message.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

@dp.message(Command("invoice"))
async def send_invoice(message: types.Message):
    args = message.text.split()
    if len(args) != 2:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ò–ù–ù –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /invoice. –ù–∞–ø—Ä–∏–º–µ—Ä "/invoice 1655163150" ')
        return

    inn = args[1]
    company_info = await get_company_info(inn)

    if not company_info:
        await message.answer("‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ò–ù–ù –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await message.answer("üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—á–µ—Ç–∞...")
    pdf_path = await generate_invoice(company_info, message.from_user.id)
    pdf_file = FSInputFile(pdf_path)
    await message.answer_document(pdf_file, caption="‚úÖ –í–∞—à —Å—á–µ—Ç –≥–æ—Ç–æ–≤! –ü—Ä–∏ –æ–ø–ª–∞—Ç–µ, –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –∏ –¥–∞—Ç—É")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
@dp.callback_query(lambda c: c.data == "buy_subscription_lite" or c.data == "buy_subscription_pro")
async def process_subscription(callback_query: types.CallbackQuery):
    subscription = subs.get_subscription_info(callback_query.data)

    user_id = callback_query.from_user.id
    await bot.send_invoice(user_id,
                           title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞",
                           description=f"{subscription.description} –Ω–∞ {SUBSCRIPTION_DURATION} –¥–Ω–µ–π",
                           provider_token=PAYMENTS_TOKEN,
                           currency="rub",
                           photo_url="https://storage.yandexcloud.net/tgmaps/buh.jpg",
                           photo_width=2048,
                           photo_height=2048,
                           # photo_size=416,
                           is_flexible=False,
                           prices=[LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞", amount=subscription.price * 100)],
                           start_parameter="one-month-subscription",
                           payload=subscription.payload)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ PreCheckoutQuery
@dp.pre_checkout_query()
async def pre_checkout_query_handler(pre_checkout_query: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
@dp.message(F.successful_payment)
async def successful_payment(message: types.Message):
    payment_info = message.successful_payment

    user = await buy_subscription(message.chat.id, payment_info.invoice_payload)
    await bot.send_message(message.chat.id,
                           f"ü•≥–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ {user.subscription_expiry.date()}")

# üîπ 2. –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ñ–∞–π–ª—ã
@dp.message(lambda message: message.document)
async def handle_document(message: Message):
    document = message.document
    user_id = message.from_user.id
    user_text = message.caption

    file_id = document.file_id
    file_info = await bot.get_file(file_id)
    file_extension = document.file_name.split(".")[-1]

    if not await can_user_send_message(user_id):
        keyboard = await get_subscription_button()
        await message.answer("‚ùå –í–∞—à –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω. –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å. –õ–∏–±–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ —é—Ä.–ª–∏—Ü–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /invoice. –ï—Å–ª–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫, –Ω–∞–ø–∏—à–∏—Ç–µ @MARINA_HMA",
                             reply_markup=keyboard)
        return

    if file_extension not in SUPPORTED_EXTENSIONS:
        await message.answer(f"‚ö†Ô∏è –Ø –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ñ–∞–π–ª—ã —Ñ–æ—Ä–º–∞—Ç–∞: {', .'.join(SUPPORTED_EXTENSIONS)}\n–ï—Å–ª–∏ –í–∞—à —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ Excel, –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –º–Ω–µ –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
    await bot.download_file(file_info.file_path, document.file_name)

    await message.answer(f"üì§ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª {document.file_name}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥...")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)

    response_text = await upload_and_analyze_file([document.file_name], user_text)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await save_message(user_id, user_text if user_text else document.file_name, response_text)
    htmlText = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', response_text)

    await message.answer(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:\n\n{htmlText}", parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: Message):
    user_id = message.from_user.id
    user_text = message.text
    if message.new_chat_members:
        await bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É! üéâ –ß—Ç–æ–±—ã –∫–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ –º–Ω–æ–π –≤ —á–∞—Ç–µ, –æ–Ω –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö /start, –µ—Å–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –Ω–µ –ø–∏—Å–∞–ª. –¢–∞–∫ –∂–µ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –≥—Ä—É–ø–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É!")
        return
    if message.left_chat_member:
        return
    if message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        if not await can_user_send_message(user_id):
            await message.answer(f"‚ùå{message.from_user.first_name} –í—ã –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞ –∏–ª–∏ –≤–∞—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç–∞ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return
    if not user_text:
        return
    if not await can_user_send_message(user_id):
        keyboard = await get_subscription_button()
        await message.answer("‚ùå –í–∞—à –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω. –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å. –õ–∏–±–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ —é—Ä.–ª–∏—Ü–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /invoice.  –ï—Å–ª–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫, –Ω–∞–ø–∏—à–∏—Ç–µ @MARINA_HMA", reply_markup=keyboard)
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)

    response_text = await chatgpt_response(user_text, message.from_user)
    htmlText = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', response_text)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await send_long_message(message, htmlText)
    await save_message(user_id, user_text, response_text)

    # await message.answer(htmlText, parse_mode="HTML")


# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())