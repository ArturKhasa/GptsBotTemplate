from openai import OpenAI

import logging
import re
import asyncio
from datetime import datetime, timedelta
from promting import inicial_start_promt
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice, ContentType, PreCheckoutQuery
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ChatAction
from config import (
    OPENAI_API_KEY,
    TELEGRAM_BOT_TOKEN,
    async_session,
    ADMIN_USER_ID,
    SUBSCRIPTION_PRICE,
    FREE_MESSAGES_LIMIT,
    PAYMENTS_TOKEN,
    SUBSCRIPTION_DURATION
)
from database import init_db, ChatHistory, User
from sqlalchemy.future import select

client = OpenAI(api_key=OPENAI_API_KEY)
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ aiogram 3.7+
bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ó–∞–¥–∞—ë–º –∫–æ—Ä–Ω–µ–≤–æ–π –ø—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞.

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ ChatGPT
async def chatgpt_response(prompt: str) -> str:
    try:
        sys_prompt = inicial_start_promt()
        response = client.chat.completions.create(model="gpt-4o-mini",
        messages=[{"role": "system", "content": sys_prompt},
                  {"role": "user", "content": prompt}],
        temperature=0.2)
        return response.choices[0].message.content
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        await notify_admin(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ PostgreSQL
async def save_message(user_id: int, user_message: str, bot_response: str):
    try:
        async with async_session() as session:
            async with session.begin():
                new_entry = ChatHistory(
                    user_id=user_id,
                    user_message=user_message,
                    bot_response=bot_response
                )
                session.add(new_entry)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
        await notify_admin(f"–û—à–∏–±–∫–∞ –ë–î: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ Telegram
async def notify_admin(error_message: str):
    try:
        await bot.send_message(ADMIN_USER_ID, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:\n<pre>{error_message}</pre>")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_or_create_user(tg_user, utm) -> User:
    async with async_session() as session:
        async with session.begin():
            result = await session.execute(select(User).where(User.user_id == tg_user.id))
            user = result.scalars().first()

            if not user:
                user = User(user_id=tg_user.id,full_name=tg_user.first_name, username=tg_user.username, free_messages=FREE_MESSAGES_LIMIT, has_subscription=False, utm=utm)
                session.add(user)
                await session.commit()

            return user

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async def broadcast_message(text: str):
    async with async_session() as session:
        async with session.begin():
            result = await session.execute(select(User.user_id))
            users = result.scalars().all()

            for user_id in users:
                try:
                    await bot.send_message(user_id, text)
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
async def can_user_send_message(user_id: int) -> bool:
    async with async_session() as session:
        async with session.begin():
            result = await session.execute(select(User).where(User.user_id == user_id))
            user = result.scalars().first()

            if user and user.has_subscription:
                if user.subscription_expiry <= datetime.now():
                    user.has_subscription = False
                    await session.commit()
                    return False
                return True  # –£ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π

            if user and user.free_messages > 0:
                user.free_messages -= 1  # –£–º–µ–Ω—å—à–∞–µ–º –ª–∏–º–∏—Ç
                await session.commit()
                return True

            return False

# –ö–Ω–æ–ø–∫–∞ "–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
async def get_subscription_button():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ({SUBSCRIPTION_PRICE} —Ä—É–±.)", callback_data="buy_subscription")]
    ])
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async def buy_subscription(user_id: int) -> User:
    async with async_session() as session:
        async with session.begin():
            result = await session.execute(select(User).where(User.user_id == user_id))
            user = result.scalars().first()

            if user:
                user.has_subscription = True
                user.subscription_expiry = datetime.utcnow() + timedelta(days=SUBSCRIPTION_DURATION)
                # user.free_messages = FREE_MESSAGES_LIMIT
                await session.commit()
    return user

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    args = message.text.split(" ", 1)  # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
    utm = args[1] if len(args) > 1 else None  # –ò–∑–≤–ª–µ–∫–∞–µ–º UTM-–º–µ—Ç–∫—É
    await get_or_create_user(message.from_user, utm)
    # await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏. –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã!")
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –Ø ‚Äî —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –±—É—Ö–≥–∞–ª—Ç–µ—Ä.üëã\n\n"
                         f"–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –ø–æ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º, —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–∞–ª–æ–≥–∏, —É–∑–Ω–∞—Ç—å —Å—Ä–æ–∫–∏ —Å–¥–∞—á–∏ –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –≤–µ–¥–µ–Ω–∏—é —É—á—ë—Ç–∞. –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –º–Ω–µ {FREE_MESSAGES_LIMIT} –≤–æ–ø—Ä–æ—Å–æ–≤, —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ! ü§ü\n\n"
                         f"–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ!")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
@dp.message(Command("broadcast"))
async def cmd_broadcast(message: Message):
    if message.from_user.id != ADMIN_USER_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    text = message.text.replace("/broadcast", "").strip()
    if not text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
    await broadcast_message(text)
    await message.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
@dp.callback_query(lambda c: c.data == "buy_subscription")
async def process_subscription(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await bot.send_invoice(user_id,
                           title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞",
                           description="–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–æ—Ç–∞ –Ω–∞ 1 –º–µ—Å—è—Ü",
                           provider_token=PAYMENTS_TOKEN,
                           currency="rub",
                           photo_url="https://storage.yandexcloud.net/tgmaps/buh.jpg",
                           photo_width=1024,
                           photo_height=1024,
                           # photo_size=416,
                           is_flexible=False,
                           prices=[LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞", amount=SUBSCRIPTION_PRICE * 100)],
                           start_parameter="one-month-subscription",
                           payload="test-invoice-payload")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ PreCheckoutQuery
@dp.pre_checkout_query()
async def pre_checkout_query_handler(pre_checkout_query: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
@dp.message(F.successful_payment)
async def successful_payment(message: types.Message):
    payment_info = message.successful_payment
    logging.info(payment_info)
    user = await buy_subscription(message.chat.id)
    await bot.send_message(message.chat.id,
                           f"ü•≥–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ {user.subscription_expiry.date()}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: Message):
    user_id = message.from_user.id
    user_text = message.text
    if not await can_user_send_message(user_id):
        keyboard = await get_subscription_button()
        await message.answer("‚ùå –í–∞—à –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω. –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=keyboard)
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)

    response_text = await chatgpt_response(user_text)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await save_message(user_id, user_text, response_text)
    htmlText = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', response_text)
    await message.answer(htmlText, parse_mode="HTML")


# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())